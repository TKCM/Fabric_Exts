
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GetCloseOrderedList ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ある座標から複数の座標[]に対して近い座標のインデックス、距離、ウェイト値のリストを取得する
//  リストは近い順、取得の１６個まで
operator GetDistanceListTask<<<i>>>(io Scalar distance[], Vec3 source, Vec3 target[]){
  distance[i] = source.distanceTo(target[i]);
}

function GetCloseOrderedList(
	in Vec3 source,
	in Vec3 target[],
	in Scalar maxDistance,
	in Integer maxCount,
	io LocalL4UInt32Array orderedIndex,
	io LocalL4ScalarArray orderedDistance,
	io LocalL4ScalarArray weights
	){
	//　ターゲットへの距離を入れる配列の準備　[検出するポジションの数][ターゲットの数]
  Scalar distance[];
  distance.resize(target.size()); 
  // ターゲットへの距離を一律で格納 
  if(target.size() < 1000){
    for(Integer i=0; i<target.size(); i++){
      GetDistanceListTask(i, distance, source, target);
    }
  }else{
    GetDistanceListTask<<<target.size()>>>(distance, source, target);
  }
  //　ターゲットのIDリストを準備　
  // このあとの昇順処理の際にターゲットIDも同時に並べ替えするため
  Index targetID[];
  targetID.resize(target.size());
  for(Integer i=0; i<target.size(); i++){
    targetID[i] = i;
  }
  // 上で取得した距離のリストを昇順にし、ターゲットのIDも同じく並び替える
  Scalar tmpS;
  Index tmpID;
  for(Integer i=0; i<distance.size(); i++){
    for(Integer j=i+1; j<distance.size(); j++) {
      if (distance[i] > distance[j]) {
        tmpS =  distance[i];
        tmpID = targetID[i];
        distance[i] = distance[j];
        targetID[i] = targetID[j];
        distance[j] = tmpS;
        targetID[j] = tmpID;
      }
    }
  }
  // 差分の小さな順番に合計値とターゲットIDを取得
  // 指定した検出距離、もしくは検出個数でカットオフする
  Scalar sum;
  Integer outPutCount = 0;
  for(Integer i=0; i<distance.size(); i++){
    if(distance[i] < maxDistance && i < maxCount){
      sum += pow(distance[i], 3); // ウェイトの計算用に距離の合計値を作る  （対象に近いほどウェイト値が強くなるように3乗した値を使用する）
      outPutCount += 1; // 条件によってターゲットから検出される数が変わるので、条件に合った数を数えておく
    }else{
      break;
    }
  }
  // 近しい距離で並び変えたターゲット[]の上位のインデックスリスト、距離リスト、ウェイトリストを出力
  // 距離からウェイト値への変換は、(距離/合計)で出した比率の逆比を使い(逆比/逆比合計)で算出している
  Scalar sum2;
  orderedIndex.resize(outPutCount);
  orderedDistance.resize(outPutCount);
  weights.resize(outPutCount);
  for(Integer i=0; i<outPutCount; i++){
    orderedIndex.set(i, targetID[i]);
    orderedDistance.set(i,distance[i]);
    sum2 += 1/(pow(distance[i], 3)/sum); // 逆比の合計を作る　（対象に近いほどウェイト値が強くなるように3乗した値を使用する）
  }
  for(Integer i=0; i<outPutCount; i++){
    weights.set(i, 1/(pow(distance[i], 3)/sum) / sum2); //逆比から改めて比（ウェイト値）を算出　（対象に近いほどウェイト値が強くなるように3乗した値を使用する）
  }
  //  ターゲットの数を格納しておく
  orderedIndex.others.resize(1);
  orderedIndex.others[0] = target.size();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GetCloseOrderedListArray //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ある座標[]から複数の座標[]に対して近い座標のインデックス、距離、ウェイト値のリストを取得する
operator getDistanceListArrayTask<<<i>>>(io Scalar distance[][], Vec3 source[], Vec3 target[]){
  for(Integer j=0; j<source.size(); j++){
    distance[j][i] = source[j].distanceTo(target[i]);
  }
}

operator getDistanceListArrayTask2<<<j>>>(io Scalar distance[][], Vec3 source[], Vec3 target[]){
  for(Integer i=0; i<target.size(); i++){
    distance[j][i] = source[j].distanceTo(target[i]);
  }
}

function GetCloseOrderedListArray(
	in Vec3 source[],
	in Vec3 target[],
	in Scalar maxDistance,
	in Integer maxCount,
	io LocalL4UInt32Array orderedIndex[],
	io LocalL4ScalarArray orderedDistance[],
	io LocalL4ScalarArray weights[]
	){
  //　ターゲットへの距離を入れる配列の準備　[検出するポジションの数][ターゲットの数]
  Scalar distance[][];
  distance.resize(source.size());
  for(Integer i=0; i<source.size(); i++){
    distance[i].resize(target.size());  
  }
  // ターゲットへの距離を一律で格納
  if(source.size() < 1000 && target.size() < 1000){
    for(Integer i=0; i<target.size(); i++){
      getDistanceListArrayTask(i, distance, source, target);
    }
  }else{
    if(source.size() > target.size()){
      getDistanceListArrayTask2<<<source.size()>>>(distance, source, target);
    }else{
      getDistanceListArrayTask<<<target.size()>>>(distance, source, target);
    }
  }
  //　ターゲットのIDリストを準備　
  // このあとの昇順処理の際にターゲットIDも同時に並べ替えするため
  Index targetID[][];
  targetID.resize(source.size());
  for(Integer i=0; i<source.size(); i++){
    distance[i].resize(target.size());
    targetID[i].resize(target.size());
    for(Integer j=0; j<target.size(); j++){
      targetID[i][j] = j;
    }
  }
  // 上で取得した距離のリストを昇順にし、ターゲットのIDも同じく並び替える
  for(Integer k=0; k<source.size(); k++){
    Scalar tmpS;
    Index tmpID;
    for(Integer i=0; i<distance[k].size(); i++){
      for(Integer j=i+1; j<distance[k].size(); j++) {
        if (distance[k][i] > distance[k][j]) {
          tmpS =  distance[k][i];
          tmpID = targetID[k][i];
          distance[k][i] = distance[k][j];
          targetID[k][i] = targetID[k][j];
          distance[k][j] = tmpS;
          targetID[k][j] = tmpID;
        }
      }
    }
  }
  // 差分の小さな順番に合計値とターゲットIDを取得
  // 指定した検出距離、もしくは検出個数でカットオフする
  Scalar sum[];
  sum.resize(source.size());
  Integer outPutCount[];
  outPutCount.resize(source.size());
  for(Integer k=0; k<source.size(); k++){
    for(Integer i=0; i<distance[k].size(); i++){
      if(distance[k][i] < maxDistance && i < maxCount){
        sum[k] += pow(distance[k][i], 3); // ウェイトの計算用に距離の合計値を作る  （対象に近いほどウェイト値が強くなるように3乗した値を使用する）
        outPutCount[k] += 1; // 条件によって最終出力のターゲット数が変わるので、条件内のターゲット数を数えておく
      }else{
        break;
      }
    }
  }
  
  // 近しい距離で並び変えたターゲットの上位のインデックスリスト、距離リスト、ウェイトリストを出力
  // 距離からウェイト値への変換は、(距離/合計)で出した比率の逆比を使い(逆比/逆比合計)で算出している
  Scalar sum2[];
  sum2.resize(source.size());
  orderedIndex.resize(source.size());
  orderedDistance.resize(source.size());
  weights.resize(source.size());
  
  for(Integer k=0; k<source.size(); k++){
    orderedIndex[k].resize(outPutCount[k]);
    orderedDistance[k].resize(outPutCount[k]);
    weights[k].resize(outPutCount[k]);
    for(Integer i=0; i<outPutCount[k]; i++){
      orderedIndex[k].set(i, targetID[k][i]);
      orderedDistance[k].set(i,distance[k][i]);
      sum2[k] += 1/(pow(distance[k][i], 3)/sum[k]); // 距離の逆比を作り合計値を作成　（対象に近いほどウェイト値が強くなるように3乗した値を使用する）
    }
    for(Integer i=0; i<outPutCount[k]; i++){
      weights[k].set(i, 1/(pow(distance[k][i], 3)/sum[k]) / sum2[k]); //逆比から改めて比（ウェイト値）を算出　（対象に近いほどウェイト値が強くなるように3乗した値を使用する）
    }
  }
  //  ターゲットの数を格納しておく
  orderedIndex[0].others.resize(1);
  orderedIndex[0].others[0] = target.size();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GetSmallAngleOrderedListArray //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 入力のベクトルからターゲットへのベクトルに対して、角度の差が小さなベクトルを順番に取得する（最大４つ）
// 取得はターゲットの配列番号、角度の差分、ウェイト値
function Scalar Scalar.ToAngle?(){
  Scalar angle;
  angle = abs((asin(this / 1.0) * 180) / PI -90);
  return angle;
}
operator getAngleListArrayTask<<<index>>>(io Scalar delta[][], Vec3 direction[], Vec3 target[]){
  for(Integer i=0; i<target.size(); i++){
    Scalar radian = direction[index].dot(target[i]);
    delta[index][i] = radian.ToAngle();
  }
}
// directionとtargetはノーマライズしておく必要がある
function GetAngleListArray(
  in Vec3 direction[],
  in Vec3 target[],
  in Scalar maxAngle,
  in Integer maxCount,
  io LocalL4UInt32Array indexList[],
  io LocalL4ScalarArray deltaAngle[],
  io LocalL4ScalarArray weights[]
  ){
  //　角度の差分を入れる配列の準備　[検出するベクトルの数][ターゲットの数]
  Scalar delta[][];
  delta.resize(direction.size());
  for(Integer i=0; i<direction.size(); i++){
    delta[i].resize(target.size());  
  }
  // 角度の差分を一律で格納
  if(direction.size() < 1000){
    for(Integer i=0; i<direction.size(); i++){
      getAngleListArrayTask(i, delta, direction, target);
    }
  }else{
    getAngleListArrayTask<<<direction.size()>>>(delta, direction, target);
  }
  //　ターゲットのIDリストを準備
  // このあとの昇順処理の際にターゲットIDも同時に並べ替えするため
  Index targetID[][];
  targetID.resize(direction.size());
  for(Integer i=0; i<direction.size(); i++){
    targetID[i].resize(target.size());
    for(Integer j=0; j<target.size(); j++){
      targetID[i][j] = j;
    }
  }
  // 上で取得した差分のリストを昇順にし、ターゲットのIDも同じく並び替える
  for(Integer k=0; k<direction.size(); k++){
    Scalar tmpS;
    Index tmpID;
    for(Integer i=0; i<delta[k].size(); i++){
      for(Integer j=i+1; j<delta[k].size(); j++) {
        if (delta[k][i] > delta[k][j]) {
          tmpS =  delta[k][i];
          tmpID = targetID[k][i];
          delta[k][i] = delta[k][j];
          targetID[k][i] = targetID[k][j];
          delta[k][j] = tmpS;
          targetID[k][j] = tmpID;
        }
      }
    }
  }
  // 差分の小さな順番に合計値とターゲットIDを取得
  Scalar sum[];
  sum.resize(direction.size());
  Integer outPutCount[];
  outPutCount.resize(direction.size());
  for(Integer k=0; k<direction.size(); k++){
    for(Integer i=0; i<delta[k].size(); i++){
      if(delta[k][i] < maxAngle && i < maxCount){
        sum[k] += pow(delta[k][i], 3); // ウェイトの計算用に角度の差分の合計値を作る  （対象に近いほどウェイト値が強くなるように3乗した値を使用する）
        outPutCount[k] += 1; // 条件によって最終出力のターゲット数が変わるので、条件内のターゲット数を数えておく
      }else{
        break;
      }
    }
  }
  // 角度の差分の小さな順で並び変えたターゲット[]の上位のインデックスリスト、差分リスト、ウェイトリストを出力
  // 角度の差分からウェイト値への変換は、(角度の差分/合計)で出した比率の逆比を使い(逆比/逆比合計)で算出している
  Scalar sum2[];
  sum2.resize(direction.size());
  indexList.resize(direction.size());
  deltaAngle.resize(direction.size());
  weights.resize(direction.size());

  for(Integer k=0; k<direction.size(); k++){
    indexList[k].resize(outPutCount[k]);
    deltaAngle[k].resize(outPutCount[k]);
    weights[k].resize(outPutCount[k]);
    for(Integer i=0; i<outPutCount[k]; i++){
      indexList[k].set(i, targetID[k][i]);
      deltaAngle[k].set(i,delta[k][i]);
      sum2[k] += 1/(pow(delta[k][i], 3)/sum[k]); // 差分の逆比を作り合計値を作成 （対象に近いほどウェイト値が強くなるように3乗した値を使用する）
    }
    for(Integer i=0; i<outPutCount[k]; i++){
      weights[k].set(i, 1/(pow(delta[k][i], 3)/sum[k]) / sum2[k]); //逆比から改めて比（ウェイト値）を算出 （対象に近いほどウェイト値が強くなるように3乗した値を使用する）
    }
  }
  //  ターゲットの数を格納しておく
  indexList[0].others.resize(1);
  indexList[0].others[0] = target.size();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MulWeight /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
operator MulWeightArrayTask<<<i>>>(io Vec3 result[], in Vec3 target[], in LocalL4UInt32Array indexList[], in LocalL4ScalarArray weights[]){
  for(Integer j=0; j<indexList[i].count; j++){
    result[i] += target[indexList[i].first4[j]] * weights[i].first4[j];
  }
}

function Vec3[].mulWeight!(Vec3 target[], LocalL4UInt32Array indexList[], LocalL4ScalarArray weights[]){
  if(indexList[0].others.size() != 0){
    if(indexList[0].others[0] > target.size()){
      setError("Vec3.MulWeight node : IndexList require count = "+indexList[0].others[0]+". But target count = "+target.size());
    }
  }else{
    this.resize(indexList.size());
    if(indexList.size() > 300){
      MulWeightArrayTask<<<indexList.size()>>>(this, target, indexList, weights);
    }else{
      for(Integer i=0; i<indexList.size(); i++){
        MulWeightArrayTask(i, this, target, indexList, weights);
      }
    }
  }
}
