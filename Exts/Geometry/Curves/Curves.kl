
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  hasEmptyCurve ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  各カーブが正常か（長さがあるか）をチェック
function Boolean Curves.hasEmptyCurve?(String functionName){
  Boolean have;
  Integer check;
  for(Integer i=0; i<this.curveCount(); i++){
    if(this.getCurve(i).getLength() == 0.0){
      report("!!!!!!Error!!!!!! "+functionName+" : curve index '"+i+"'' is empty curve");
      check += 1;
    }
  }
  if(check > 0){
    have = true;
  } 
  
  return have;  
}
//  hasEmptyCurve ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  createNormalsValue //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function Curves.createNormalsValue(io Vec3 result[], in Integer control, in Vec3 fixValue){
  result.resize(this.allCurvesPointRange());
  
  Size poiCount = 0;
  Vec3 curvature;
  Vec3 tangent;
  Vec3 fixPosVec;
  Vec3 cross[];
  Vec3 crossV0;
  Vec3 crossV1;
  Vec3 crossV2;
  Integer mode;  //  0=default, 1=avoid flip, 2=direction, 3=upvector, 4=direstion pos, 5=upvector pos
  
  for(Integer i=0; i<this.curveCount(); i++){
    cross.resize(this.getCurve(i).pointCount());
    for(Integer j=0; j<this.getCurve(i).pointCount(); j++){
      Float32 nParam = 1.0 / Scalar(this.getCurve(i).pointCount()-1.0) * j;
      if(j == 0 ){
        nParam = 0.001;
      }else if(j == this.getCurve(i).pointCount() -1){
        nParam = 0.999;
      }
      
      if(this.getCurveType(i) == 1){
        crossV1 = this.getPositionAtNormalizedParam(i, nParam-0.001);
        crossV2 = this.getPositionAtNormalizedParam(i, nParam+0.001);
        tangent = crossV2 - crossV1;
      }else{
        this.getTangentAndCurvatureAtNormalizedParam(i, nParam, tangent, curvature);
      }
      
      mode = control;
      if(this.getCurveType(i) == 1){  //  linearCurve
        if(this.getPointCount(i) < 3){
          mode = 2;
        }
      }else{  // NURBSやBezieでも、ポイントが直線上に並ぶとノーマルの計算が出来なくなるので、curvatureを取得しVec3（0）だった場合はカーブ上からノーマルの取得をしないようにする
        if(this.getDegree(i) == 1 || curvature.almostEqual(Vec3(0.0))){
          mode = 2;
        }
      }

      switch(mode){
        case 0:
          result[poiCount] = this.getNormalAtNormalizedParam(i, nParam);
          break;
        case 1:
          crossV0 = this.getPositionAtNormalizedParam(i, nParam);
          crossV1 = (this.getPositionAtNormalizedParam(i, nParam-0.001) - crossV0);
          crossV2 = (this.getPositionAtNormalizedParam(i, nParam+0.001) - crossV0);
          if(j==0){
            crossV1 = this.getPointPosition(i, 1) - this.getPointPosition(i, 0);
            crossV2 = this.getPointPosition(i, 2) - this.getPointPosition(i, 0);
          }
          cross[j] = crossV1.cross(crossV2);
          if(0<j){
            if(cross[j].dot(cross[j-1]) < 0.0 ){
              cross[j] *= -1.0;
            }
          }
          if(this.getCurve(i).isClosed()){
            cross[j] = crossV1.cross(crossV2);
          }  
          result[poiCount] = tangent.cross(cross[j]).unit();
          break;
        case 2:
          if(fixValue == Vec3(0.0)){
            report("!!!!!!Error!!!!!! ::: CreateNormalDirectionAttribute : input fixNormals value is Vec3(0,0,0)");
            return;
          }
          result[poiCount] = fixValue.unit();
          break;
        case 3:
          if(fixValue == Vec3(0.0)){
            report("!!!!!!Error!!!!!! ::: CreateNormalDirectionAttribute : input fixNormals value is Vec3(0,0,0)");
            return;
          }
          Quat q();
          result[poiCount] = q.setFromDirectionAndUpvector(tangent, fixValue).getYaxis().unit();
          break;
        case 4:
          fixPosVec = fixValue - this.getPositionAtNormalizedParam(i, nParam);
          Quat q();
          result[poiCount] = q.setFromDirectionAndUpvector(fixPosVec, tangent).getZaxis().unit();
          break;
        case 5:
          fixPosVec = fixValue - this.getPositionAtNormalizedParam(i, nParam);
          Quat q();
          result[poiCount] = q.setFromDirectionAndUpvector(tangent, fixPosVec).getYaxis().unit();
          break;
      }
      
      if(j == this.getCurve(i).pointCount()-1 && this.getCurve(i).isClosed()){
        result[poiCount] = result[ poiCount-this.getCurve(i).pointCount()+1];
      }
      poiCount += 1;
    }
  }
}
//  createNormalsValue //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  createTwistNormalsValue /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ツイストしたノーマルディレクションアトリビュートと、ツイストの各情報を登録するtwistValuesを制作
//  twistValuesはcreateNormalDirCurvesで使用
//  各カーブの先頭のcreateNormalsValueの向きをアップベクターにして算出したベクトルからツイストを始めるため、使用にはcreateNormalsValueのresultの値が必要になる（result = io normalDir[]）
function Curves.createTwistNormalsValue(
  io Vec3 twistValues[],  //  Vec3(twistAngle, twistRatio, mode) : mode 0=full length, 1=unit length, 2=full length&RatioInv, 3=unit length&RatioInv
  io Vec3 normalDir[],
  in Scalar twistAngle, //  ツイスト値
  in Integer twistAngleOf,  //  0=ツイスト値をカーブの始点から終点までで適応、1＝カーブの長さ1.0ごとにツイスト値を適応
  in Scalar twistRatio, //  y=X^nのグラフを使用しカーブの始点から終点に向けてツイスト値の適応具合に強弱をつける
  in Boolean twistRatioInv  //  twistRatioの計算をy=1.0-X^(1.0-n)のグラフにする
  ){
  Size poiCount = 0;
  Scalar nParam;
  Vec3 curvature, upV, tangent, crossV1, crossV2;
  Quat q,q2;
  
  twistValues.resize(this.allCurvesPointRange());
  for(Integer i=0; i<this.curveCount(); i++){
    for(Integer j=0; j<this.getCurve(i).pointCount(); j++){
      nParam = 1.0 / Scalar(this.getCurve(i).pointCount()-1.0) * j;
      //  ポイント位置が0だとカーブのタンジェントの取得が出来ないので、微数を入れる
      if(j==0){  nParam = 0.001;  }
      //  ポイント位置におけるカーブのタンジェントの取得
      if(this.getCurveType(i) == 1){
        crossV1 = this.getPositionAtNormalizedParam(i, nParam-0.001);
        crossV2 = this.getPositionAtNormalizedParam(i, nParam+0.001);
        tangent = crossV2 - crossV1;
      }else{
        this.getTangentAndCurvatureAtNormalizedParam(i, nParam, tangent, curvature);
      }
      
      if(j==0){
        upV = normalDir[poiCount];
        normalDir[poiCount] = q.setFromDirectionAndUpvector(tangent, upV).getYaxis().unit();

        Integer mode = twistAngleOf;
        if(twistRatioInv == true){
          mode += 2;
        }
        twistValues[poiCount] = Vec3(twistAngle, twistRatio, mode);

      }else{
        Scalar angle, t;
        if(twistRatioInv == false){
          t = pow(this.getLengthRatioFromNormalizedParameter(i, nParam) ,twistRatio);
        }else{
          t = 1.0 - pow(1.0-this.getLengthRatioFromNormalizedParameter(i, nParam) ,twistRatio);
        }
        switch(twistAngleOf){
          case 0:
            angle = twistAngle * t;
            break;
          case 1:
            angle = this.getCurveLength(i) * twistAngle * t;
            break;
        }
        //  ポイントごとにツイストするべき角度（angle）のQuatを作り、normalDirに加算する
        Scalar radian = angle*PI/180.0;
        Scalar halfAngle = radian / 2.0;
        q2.set(cos(halfAngle),sin(halfAngle) * tangent).unit();
        upV= normalDir[ this.getFirstPointIndex(i) ];
        q.setFromDirectionAndUpvector(tangent, upV).unit();
        normalDir[poiCount] = q2*q.getYaxis();
      }
      poiCount += 1;
    }
  }
}
//  createTwistNormalsValue //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  addNormalDirectionAttributeCurves ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function Curves.addNormalDirectionAttributeCurves!(Index baseCurveID, Boolean create[4], Scalar distance[4]){
  //  create[4] = ノーマル、逆ノーマル、バイノーマル、逆バイノーマル
  //  distance[4] = ↑それぞれのカーブを作成する距離
  
  //  ベースカーブが正常か（長さがあるか）をチェック
  if(this.getCurve(baseCurveID).getLength() == 0.0){
    report("!!!!!!Error!!!!!! GetEvenlyDividPositions : curve index '"+baseCurveID+"'' is empty curve");
    return;
  }
  if(this.attributes.has("normalDirections") == false){
    report("!!!!!!Error!!!!!! ::: Curves.addNormalDirectionAttributeCurves : this Curves don't have 'normalDirections' attribute");
    return;
  }
  //  ベースカーブのポイント数、Curves全体の中で何番目からポイント情報が格納されているかを取得
  Size poiCount = this.getPointCount(baseCurveID);
  UInt32 startID;
  UInt32 endtID;
  this.getPointRange(baseCurveID, startID, endtID);
  //  編集済みのノーマル情報があるならアトリビュートから取得
  Vec3 normals[];
  normals.resize(poiCount);
  Ref<Vec3Attribute> normalsAttr();
  if(this.attributes.has("normalDirections")){
    normalsAttr = this.attributes.getOrCreateVec3Attribute("normalDirections");
    for(Integer i=0; i<poiCount; i++){
      normals[i] = normalsAttr.values[i+startID];
    }
  }
  //  ポイント位置でのタンジェントを取得
  Vec3 tangents[];
  tangents.resize(poiCount);
  for(Integer i=0; i<poiCount; i++){
    Float32 nParam = 1.0 / Scalar(poiCount-1) * i;
    tangents[i] = this.getTangentAtNormalizedParam(baseCurveID, nParam);
  }

  Vec3 pos[] = this.getAllPointPositions(); //  Curvesのすべてのポイントポジションを取得（↑で取得しておいたstartIDで必要箇所を特定できる）
  
  Vec3 addCurvePos[]; //  カーブ制作用のポジション格納場所を準備
  addCurvePos.resize(poiCount);
  for(Integer i=0; i<4; i++){
    if(create[i]){
      for(Integer j=0; j<poiCount; j++){
        //  それぞれのタイプごとにポジション位置の算出方法を指定
        switch(i){
          case 0: // ノーマル
            addCurvePos[j] = pos[j+startID] + normals[j] * distance[i];
            break;
          case 1: // 逆ノーマル
            addCurvePos[j] = pos[j+startID] + normals[j].negate() * distance[i];
            break;
          case 2: // バイノーマル
            addCurvePos[j] = pos[j+startID] + tangents[j].cross(normals[j]) * distance[i];
            break;
          case 3: // 逆バイノーマル
            addCurvePos[j] = pos[j+startID] + tangents[j].cross(normals[j]).negate() * distance[i];
            break;
        }
      }
      UInt8 type = this.getCurveType(baseCurveID);
      //  ベースカーブと同じタイプ、設定でカーブを作成
      switch(type){
        case 1:
          this.addLinearCurve(addCurvePos, this.isClosed(baseCurveID));
          break;
        case 2:
          UInt8 degree = this.getDegree(baseCurveID);
          this.addBezier(addCurvePos, degree, this.isClosed(baseCurveID));
          break;
        case 3:
          UInt8 degree = this.getDegree(baseCurveID);
          UInt8 form = 0;
          if(this.isClosed(baseCurveID)){
            form = 1;
            if(this.isPeriodic(baseCurveID)){
              form = 2;
            }
          }
          this.addNURBS(addCurvePos, degree, form);
          break;
      }
      Size addedCurveID = this.curveCount()-1;
      UInt32 startID2;
      UInt32 endtID2;
      this.getPointRange(addedCurveID, startID2, endtID2);
      for(Integer j=0; j<poiCount; j++){
        normalsAttr.values[startID2+j] = normalsAttr.values[startID+j];
      }
    }
  }
}
//  addNormalDirectionAttributeCurves //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  createNormalDirectionAttributeCurves ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ベースカーブのノーマル、逆ノーマル、バイノーマル、逆バイノーマルのカーブを"新規"Curvesで制作する
function Curves Curves.createNormalDirectionAttributeCurves?(Integer type, Scalar distance){  
  Curves result();
  if(this.curveCount() == 0){  
    report("!!!!!!Error!!!!!! ::: Curves.createNormalDirectionAttributeCurves : this Curves is not empty.");
    return result;
  }

  if(this.attributes.has("normalDirections") == false){
    report("!!!!!!Error!!!!!! ::: Curves.createNormalDirectionAttributeCurves : this Curves don't have 'normalDirections' attribute");
    return result;
  }
  if(this.hasEmptyCurve("CreateNormalDirectionAttributeCurves")){  return result;  }

  Size poiCount; 
  UInt32 startID;
  UInt32 endtID;
  Index cnt = this.curveCount();
  Vec3 pos[] = this.getAllPointPositions();
  Vec3 addCurvePos[];
  Vec3 normals[];
  Vec3 tangents[];
  Ref<Vec3Attribute> normalsAttr = this.attributes.getAttribute("normalDirections");
  
  for(Integer k=0; k<cnt; k++){
    poiCount = this.getPointCount(k);
    this.getPointRange(k, startID, endtID);
  
    normals.resize(poiCount);
    
    for(Integer i=0; i<poiCount; i++){
      normals[i] = normalsAttr.values[i+startID];
    }

    tangents.resize(poiCount);
    for(Integer i=0; i<poiCount; i++){
      Float32 nParam = 1.0 / Scalar(poiCount-1) * i;
      tangents[i] = this.getTangentAtNormalizedParam(k, nParam);
    }

    addCurvePos.resize(poiCount);
    for(Integer j=0; j<poiCount; j++){
      switch(type){
        case 0: 
          addCurvePos[j] = pos[j+startID] + normals[j] * distance;
          break;
        case 1: 
          addCurvePos[j] = pos[j+startID] + normals[j].negate() * distance;
          break;
        case 2: 
          addCurvePos[j] = pos[j+startID] + tangents[j].cross(normals[j]) * distance;
          break;
        case 3: 
          addCurvePos[j] = pos[j+startID] + tangents[j].cross(normals[j]).negate() * distance;
          break;
      }
    }
    UInt8 type2 = this.getCurveType(k);
    switch(type2){
      case 1:
        result.addLinearCurve(addCurvePos, this.isClosed(k));
        break;
      case 2:
        UInt8 degree = this.getDegree(k);
        result.addBezier(addCurvePos, degree, this.isClosed(k));
        break;
      case 3:
        UInt8 degree = this.getDegree(k);
        UInt8 form = 0;
        if(this.isClosed(k)){
          form = 1;
          if(this.isPeriodic(k)){
            form = 2;
          }
        }
        result.addNURBS(addCurvePos, degree, form);  
        break;
    }
    Size addedCurveID = result.curveCount()-1;
    UInt32 startID2;
    UInt32 endtID2;
    result.getPointRange(addedCurveID, startID2, endtID2);
    Ref<Vec3Attribute> normalsAttr2 = result.attributes.getOrCreateVec3Attribute("normalDirections");
    for(Integer j=0; j<poiCount; j++){
      normalsAttr2.values[startID2+j] = normalsAttr.values[startID+j];
    }
  }

  return result;
}
//  createNormalDirectionAttributeCurves ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  getEvenlyDividPositions //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Curveを均等に分割したポジションを取得する　（主な用途はCurveをLinesで再現する時用）
//  auto=turueで取得したポジションで生成するLinesは近似値は取れるが、Curve != Lines　であることに注意
function Vec3[] Curves.getEvenlyDividPositions?(Index curveIndex, Boolean auto, Scalar accuracy, Integer divisionValue){
  //  autoはカーブの分割数を自動で設定する（カーブの長さから算出）
  //  accuracyは分割数（＝生成するLinesの精度）
  //  divisionValueは分割数を指定する場合に使用
  Vec3 result[];
  //  指定されたカーブIDが存在するかチェック
  if(curveIndex >= this.curveCount()){
    report("!!!!!!Error!!!!!! GetEvenlyDividPositions : input curve index (" +curveIndex+ ") is out of range that this curve count (" +this.curveCount() +")");
    return result;
  }
  //  指定されたカーブが正常なデータか(長さがあるか)チェックする
  if(this.getCurve(curveIndex).getLength() == 0.0){
    report("!!!!!!Error!!!!!! GetEvenlyDividPositions : curve index '"+curveIndex+"'' is empty curve");
    return result;
  }
  //  カーブが閉じているか開いているか
  if(this.isClosed(curveIndex)){
    if(auto){
      result.resize( this.getCurveLength(curveIndex) * Math_max(accuracy, 1) * 1.5 + 1 );
    }else{
      result.resize( divisionValue + 1 );
    }
    Scalar base = this.getCurveLength(curveIndex) / (result.size()-1);
    for(Integer i=0; i<result.size()-1; i++){
      Scalar nParam = (base * i) / this.getCurveLength(curveIndex);
      result[i] = this.getPositionAtNormalizedParam(curveIndex, nParam);
    }
    result[result.size()-1] = result[0];
  }else{
    if(auto){
      result.resize( Math_max(this.getCurveLength(curveIndex) * Math_max(accuracy, 1), 2) );
    }else{
      result.resize( divisionValue + 1 );
    }
    Scalar base = this.getCurveLength(curveIndex) / (result.size()-1);
    for(Integer i=0; i<result.size(); i++){
      Scalar nParam = (base * i) / this.getCurveLength(curveIndex);
      result[i] = this.getPositionAtNormalizedParam(curveIndex, nParam );
    }
  }
  return result;
}
//  getEvenlyDividPositions //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  GetEvenlyDividXfos ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Curveを指定数で均等に分割した場所のXfoを取得する
//  getEvenlyDividPositionsとの違いは、”分割数の指定もしくは分割の間隔を指定するモードを選択できる””向きも取得できる”の2点
//  mode 0　＝ divisionValueの数で均等に分割、　1　＝　intervalValueの長さの間隔で分割
//  directionType 0　＝　角度の計算しない、　1　＝　カーブのタンジェントをZの向きにする、　2 = normalDirectionAttributeをZの向きにする
//  intervalValueは長さ（Length）なので、LenrthRatioやNormalizedParamで指定したい場合はlengthに変換しておく必要がある
function Curves.GetEvenlyDividXfos(
  io XfoArray result[], 
  io Xfo result2[],
  in Curves nomalCurve,
  in Integer mode,
  in Integer divisionValue,
  in Integer intervalValueType,
  in Scalar intervalValue,
  in Integer directionType,
  in Boolean addStartPosition,
  in Boolean addEndPosition,
  in Vec2Array[] segmentValues,
  in Boolean onSegment
  ){
  result.resize(this.curveCount());
  if(this == null || this.curveCount() == 0){  return;  }
  
  Xfo rest();
  Scalar base;
  Integer cnt;
  Vec2 segmentCopy[];
  Vec3 direction;
  Vec3 upVector;
  Quat q();
  for(Integer i=0; i<this.curveCount(); i++){
    if(onSegment){
      segmentCopy = segmentValues[i];
    }else{
      segmentCopy.resize(1);
      segmentCopy[0] = Vec2(0.0, 1.0);
    }    
    for(Integer j=0; j<segmentCopy.size(); j++){
      //  各セグメント内で取得するXfoの数を算出
      if(mode == 0){  // mode = divide　の場合
        base = (this.getCurveLength(i)*segmentCopy[j].y - this.getCurveLength(i)*segmentCopy[j].x) / Scalar(divisionValue+1);
        cnt = divisionValue;
      }else{ // mode = interval　の場合
        switch(intervalValueType){
          case 0:
            base = intervalValue;
            break;
          case 1:
            base = this.getCurveLength(i) * intervalValue;
            break;
          case 2:
            base = this.getCurveLength(i) * this.getLengthRatioFromNormalizedParameter(i, intervalValue);
            break;
        }
        cnt = (this.getCurveLength(i)*segmentCopy[j].y - this.getCurveLength(i)*segmentCopy[j].x) / base;
      }
      Scalar startVal;
      Scalar nParam;
      //  start pos Xfo
      if(addStartPosition){
        startVal = 0.0;
        //  get position
        if(onSegment){
          nParam = this.getNormalizedParameterFromLengthRatio(i, segmentCopy[j].x);
          startVal = nParam;
        }
        //  get orientation
        rest.tr = this.getPositionAtNormalizedParam(i, startVal);
        if(directionType != 0){
          direction = this.getTangentAtNormalizedParam(i, startVal+0.0001);
          upVector = nomalCurve.getPositionAtNormalizedParam(i, startVal+0.0001) - rest.tr;
          switch(directionType){
            case 0:
              break;
            case 1:   // curve Tagent
              rest.ori = q.setFromDirectionAndUpvector(direction, upVector.unit());
              break;
            case 2:   // curve NormalDirAttr
              rest.ori = q.setFromDirectionAndUpvector(upVector.unit(), direction);
              break;
          }
        }
        result[i].push(rest);
        result2.push(rest);
      }
      
      for(Integer k=0; k<cnt; k++){
        Scalar lengthRatio = (this.getCurveLength(i)*segmentCopy[j].x + base * (k+1)) / this.getCurveLength(i);
        if(lengthRatio < 1.0){
          nParam = this.getNormalizedParameterFromLengthRatio(i, lengthRatio);
          //  get position
          rest.tr = this.getPositionAtNormalizedParam(i, nParam);
          //  get orientation
          if(directionType != 0){
            direction = this.getTangentAtNormalizedParam(i, nParam);
            upVector = nomalCurve.getPositionAtNormalizedParam(i, nParam) - rest.tr;
            switch(directionType){
              case 0:
                break;
              case 1:  // curve Tagent
                rest.ori = q.setFromDirectionAndUpvector(direction, upVector.unit());
                break;
              case 2:  // curve NormalDirAttr
                rest.ori = q.setFromDirectionAndUpvector(upVector.unit(), direction);
                break;
            }
          }
          result[i].push(rest);
          result2.push(rest);
        }
      }
      //  end pos Xfo
      if(addEndPosition){
        Scalar endVal = 1.0;
        if(onSegment){
          nParam = this.getNormalizedParameterFromLengthRatio(i, segmentCopy[j].y);
          endVal = nParam;
        }
        //  get position
        rest.tr = this.getPositionAtNormalizedParam(i, endVal);
        //  get orientation
        if(directionType != 0){
          direction = this.getTangentAtNormalizedParam(i, endVal-0.0001);
          upVector = nomalCurve.getPositionAtNormalizedParam(i, endVal-0.0001) - rest.tr;
          switch(directionType){
            case 0:
              break;
            case 1:  // curve Tagent
              rest.ori = q.setFromDirectionAndUpvector(direction, upVector.unit());
              break;
            case 2:  // curve NormalDirAttr
              rest.ori = q.setFromDirectionAndUpvector(upVector.unit(), direction);
              break;
          }
        }
        result[i].push(rest);
        result2.push(rest);
      }    
    }
  }
}

//  GetEvenlyDividXfos ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  getWeightsFromDistanceToCurvesArray //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  ある座標[]からCurvesに対して近い座標のインデックス、ノーマライズドパラメータ、ウェイト値のリストを取得する
//  リストは近い順で最大4個まで

//  空間分析用に準備したLinesを使用し、各種パラメータを取得する
//  index = 検出スタートポジションの数
operator getClosestTask<<<index>>>(
  io Lines target[],
  in Curves targetCurves, 
  in Vec3 position[], 
  io LocalL4UInt32Array orderedIndex[],
  io LocalL4ScalarArray lengthRatio[], 
  io LocalL4ScalarArray normalizedParam[],
  io Vec3Array deltaPosition[],
  io LocalL4ScalarArray resultWeights[], 
  in Scalar length[],
  in Scalar maxDistance, 
  in Size maxCount,
  in Curves normalCurve,
  in Boolean conputeDeltaPos
  ){
  //  Curves内の複数のCurveそれぞれへの最も近いポジションを格納する配列を準備
  Vec3 closestPosition[]; 
  closestPosition.resize(target.size());
  //  Curves内の複数のCurveそれぞれへの最も近いポジションについて、Lineの長さに対する比率を格納する配列を準備
  Scalar ratio[]; 
  ratio.resize(target.size());
 
  for(Integer j=0; j<target.size(); j++){ //  Curve（空間分析用にLineに変換されているが）の本数だけループ
    UInt32 attrIDs[2];  //  近いlineのポイントインデックス（始点と終点）を取得するための配列を準備
    Scalar weight[2]; //  近いlineのポイントインデックスへのウェイト値を取得するための配列を準備
    //  空間分析　最も近いポジションを取得し配列に格納していく
    Ref<SpatialQuery> query = target[j].beginSpatialQuery();
      GeometryLocation location = query.getClosest(position[index], Vec3(1.0), SCALAR_INFINITE);
      target[j].getLocationAttributeIndicesAndWeights(location, attrIDs, weight);
      closestPosition[j] = target[j].getPointPosition(attrIDs[0]).linearInterpolate( target[j].getPointPosition(attrIDs[1]), weight[1]);
    target[j].endSpatialQuery(query);
    //  取得したポジションについてLineの長さに対する比率を取得し配列に格納していく
    Scalar segmentLengthSum;
    for(Integer k=0; k<attrIDs[0]; k++){
      segmentLengthSum += target[j].getPointPosition(k).distanceTo( target[j].getPointPosition(k+1) );
    }
    segmentLengthSum += target[j].getPointPosition(attrIDs[0]).distanceTo( target[j].getPointPosition(attrIDs[1]) ) * weight[1];
    ratio[j] = segmentLengthSum / length[j];
  }
  LocalL4ScalarArray orderedDistance_notUse; //  GetCloseOrderedListを実行するためのダミーデータを準備
  //  各Curveへの近いポジションの配列Vec3[]に対し、近い順でリストを作る
  GetWeightsFromDistanceToPositions(position[index], closestPosition, maxDistance, maxCount, orderedIndex[index], orderedDistance_notUse, resultWeights[index]);
  //  リストに沿って近いポジション値をCurveのノーマライズドパラメータに変換しリストにする
  if(resultWeights[index].count > 0){
    lengthRatio[index].resize( resultWeights[index].count );
    if(conputeDeltaPos){
      deltaPosition[index].resize( resultWeights[index].count );
    }
    for(Integer k=0; k<resultWeights[index].count; k++){
      normalizedParam[index].resize( resultWeights[index].count );
      // 比率（検出位置までの長さ/カーブの長さ）を格納
      lengthRatio[index].set(k, ratio[ orderedIndex[index].first4[k] ]);
      
      // 検出スタートポジションからカーブ上の最も近いポジションまでの差分座標を取得
      Scalar nParam = targetCurves.getNormalizedParameterFromLengthRatio(orderedIndex[index].first4[k], ratio[ orderedIndex[index].first4[k] ]);
      normalizedParam[index].set(k, nParam);
      if(conputeDeltaPos){
        Vec3 v2 = targetCurves.getTangentAtNormalizedParam (orderedIndex[index].first4[k], nParam);
        Vec3 v1 = normalCurve.getPositionAtNormalizedParam (orderedIndex[index].first4[k], nParam) - targetCurves.getPositionAtNormalizedParam (orderedIndex[index].first4[k], nParam);
        Quat qu;  qu.setFromDirectionAndUpvector(v2, v1);
        Mat44 im = Xfo(qu, closestPosition[ orderedIndex[index].first4[k] ], Vec3(1.0)).toMat44().inverse();
        deltaPosition[index][k] = im.multiplyVector3(position[index]);
      }
    }
  }
}

function Curves.getWeightsFromDistanceToCurvesArray(
  in Vec3 positions[],  
  in Scalar maxDistance,
  in Size maxCount,
  io LocalL4UInt32Array indexList[],
  io LocalL4ScalarArray lengthRatio[],
  io LocalL4ScalarArray normalizedParam[],
  io Vec3Array deltaPosition[],
  io LocalL4ScalarArray weights[],
  in Boolean conputeDeltaPos
  ){
  indexList.resize(positions.size());
  lengthRatio.resize(positions.size());
  normalizedParam.resize(positions.size());
  weights.resize(positions.size());
  //  これから作る各Linesの長さを取得しておくための配列を準備
  //  配列の数 = Curveの数 = Linesの数
  Scalar length[];
  length.resize(this.curveCount());
  //  CurveをLinesに変換するためのデータを準備
  //  Linesに変換するのはCurveに空間分析メソッドが無いため
  Lines lines[];
  lines.resize(this.curveCount());
  //  各CurveをLinesに変換し、空間分析の準備を行う
  for(Integer i=0; i<lines.size(); i++){
    lines[i] = Lines();
    Vec3 linesPoi[] = this.getEvenlyDividPositions(i, true, 1, 0);  //  上記カスタムメソッドを使用
    if(linesPoi.size() == 0){
      report("!!!!!!Error!!!!!! GetCloseOrderedList ot GetCloseOrderedListArray : curve index '"+i+"'' is empty curve");
      return;
    }
    if(linesPoi[0] == linesPoi[1]){
      report("!!!!!!Error!!!!!! GetCloseOrderedList ot GetCloseOrderedListArray : chack degree value of input NURBS");
      return;
    }
    lines[i].addLineStrip( linesPoi );
    //  Linesの長さを取得
    for(Integer j=0; j<linesPoi.size()-1; j++){
      length[i] += linesPoi[j].distanceTo(linesPoi[j+1]);
    }
    //  クローズカーブ対応
    if(this.isClosed(i)){
      lines[i].addClosedLine(linesPoi.size()-1, 0);
      length[i] += linesPoi[linesPoi.size()-1].distanceTo(linesPoi[0]);
    }
    lines[i].prepareForSpatialQueries(1, null);
  }
  //  deltaPosition算出で使用するノーマル計算用のカーブを作成
  Curves normalCurves();
  if(conputeDeltaPos){
    for(Integer i=0; i<this.curveCount(); i++){
      Size poiCount = this.getPointCount(i);
      UInt32 startID;
      UInt32 endtID;
      this.getPointRange(i, startID, endtID);
      //  編集済みのノーマル情報があるならアトリビュートから取得
      Vec3 normals[];
      normals.resize(poiCount);
      if(this.attributes.has("normalDirections")){
        Ref<Vec3Attribute> normalsAttr = this.attributes.getAttribute("normalDirections");
        for(Integer j=0; j<poiCount; j++){
          normals[j] = normalsAttr.values[j+startID];
          if(normalsAttr.values[j] == Vec3(0.0)){
            report("!!!!!!Error!!!!!! ::: Curves.getCloseOrderedListArray : 'normalDirections' attribute values["+j+"] is Vec3(0.0)");
            return;
          }
        }
      }else{
        report("!!!!!!Error!!!!!! ::: Curves.getCloseOrderedListArray : To compute deltaPosition need to 'normalDirections' attribute of Curves");
        return;
      }
      
      Vec3 pos[] = this.getAllPointPositions(); //  Curvesのすべてのポイントポジションを取得（↑で取得しておいたstartIDで必要箇所を特定できる）
      
      Vec3 addCurvePos[]; //  カーブ制作用のポジション格納場所を準備
      addCurvePos.resize(poiCount);
      for(Integer j=0; j<poiCount; j++){
        addCurvePos[j] = pos[j+startID] + normals[j];
      }
      UInt8 type = this.getCurveType(i);
        //  ベースカーブと同じタイプ、設定でカーブを作成
        switch(type){
          case 1:
            normalCurves.addLinearCurve(addCurvePos, this.isClosed(i));
            break;
          case 2:
            UInt8 degree = this.getDegree(i);
            normalCurves.addBezier(addCurvePos, degree, this.isClosed(i));
            break;
          case 3:
            UInt8 degree = this.getDegree(i);
            UInt8 form = 0;
            if(this.isClosed(i)){
              form = 1;
              if(this.isPeriodic(i)){
                form = 2;
              }
            }
            normalCurves.addNURBS(addCurvePos, degree, form);  
            break;
        }
    }
    deltaPosition.resize(positions.size());
  }
    
  //  上記オペレータを実行
  //  検索位置が3００個より多ければ並列処理
  if(positions.size() > 300){
    getClosestTask<<<positions.size()>>>(lines, this, positions, indexList, lengthRatio, normalizedParam, deltaPosition, weights, length, maxDistance, maxCount, normalCurves, conputeDeltaPos);
  }else{
    for(Integer i=0; i<positions.size(); i++){
      getClosestTask(i, lines, this, positions, indexList, lengthRatio, normalizedParam, deltaPosition, weights, length, maxDistance, maxCount, normalCurves, conputeDeltaPos);
    }
  }
  //  MulWeightでターゲット数に不足がないかの確認を行えるようにターゲットの数を格納しておく
  //  カウントがothers[0]を作るために5になるが、MulWeightではweightListのcountを参照するので問題ないはず
  indexList[0].count = 5;
  indexList[0].others.resize(1);
  indexList[0].others[0] = this.curveCount();
}
//  getWeightsFromDistanceToCurvesArray //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  getMultipliedCurvesValueByWeights ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GetCloseOrderedListArray等で取得した各情報を元に、ターゲットのカーブからタンジェント、ノーマル、ポジション、差分座標にウェイトを掛けた値を取得する

// カーブ上のパラメータポジションのポジション値xウェイト
operator MulWeightTaskPos<<<index>>>(
  io Vec3 result[], 
  in Curves target, 
  in LocalL4UInt32Array indexList[], 
  in LocalL4ScalarArray normalizedParam[], 
  in LocalL4ScalarArray weights[]
  ){
  Vec3 rest();
  for(Integer i=0; i<weights[index].count; i++){
    rest += target.getPositionAtNormalizedParam(indexList[index].first4[i], normalizedParam[index].first4[i]) * weights[index].first4[i];
  }
  result[index] = rest;
}
// カーブ上のパラメータポジションのタンジェント値xウェイト
operator MulWeightTaskTan<<<index>>>(
  io Vec3 result[], 
  in Curves target, 
  in LocalL4UInt32Array indexList[], 
  in LocalL4ScalarArray normalizedParam[], 
  in LocalL4ScalarArray weights[]
  ){
  Vec3 rest();
  for(Integer i=0; i<weights[index].count; i++){
    rest += target.getTangentAtNormalizedParam(indexList[index].first4[i], normalizedParam[index].first4[i]) * weights[index].first4[i];
  }
  result[index] = rest;
}
// カーブ上のパラメータポジションのノーマル値xウェイト
operator MulWeightTaskNom<<<index>>>(
  io Vec3 result[], 
  in Curves target, 
  in LocalL4UInt32Array indexList[], 
  in LocalL4ScalarArray normalizedParam[], 
  in LocalL4ScalarArray weights[],
  in Curves normalCurves,
  ){
  Vec3 rest();
  for(Integer i=0; i<weights[index].count; i++){
    rest += normalCurves.getPositionAtNormalizedParam (indexList[index].first4[i], normalizedParam[index].first4[i]) - target.getPositionAtNormalizedParam (indexList[index].first4[i], normalizedParam[index].first4[i]) * weights[index].first4[i];
  }
  result[index] = rest;
}
// 検出スタートポジションからカーブ上の最も近いポジションまでの差分座標xウェイト
operator MulWeightTaskDlt<<<index>>>(
  io Vec3 result[], 
  in Curves target, 
  in LocalL4UInt32Array indexList[], 
  in LocalL4ScalarArray normalizedParam[], 
  in Vec3Array deltaPosition[], 
  in LocalL4ScalarArray weights[],
  in Curves normalCurves,
  ){
  Vec3 rest();
  for(Integer i=0; i<weights[index].count; i++){
    Vec3 restTan = target.getTangentAtNormalizedParam(indexList[index].first4[i], normalizedParam[index].first4[i]);
    Vec3 restNom = normalCurves.getPositionAtNormalizedParam (indexList[index].first4[i], normalizedParam[index].first4[i]) - target.getPositionAtNormalizedParam (indexList[index].first4[i], normalizedParam[index].first4[i]);

    Vec3 restPos = target.getPositionAtNormalizedParam(indexList[index].first4[i], normalizedParam[index].first4[i]);
    Quat qu;
    qu.setFromDirectionAndUpvector(restTan, restNom);
    Mat44 gM = Xfo(qu, restPos, Vec3(1.0)).toMat44();
    rest += gM.multiplyVector3(deltaPosition[index][i]) * weights[index].first4[i];
  }
  result[index] = rest;
}
function Curves.getMultipliedCurvesValueByWeights(
  io Vec3 result[], 
  in Integer getValueType,
  in Integer ratioType,
  in LocalL4UInt32Array indexList[], 
  in LocalL4ScalarArray lengthRatio[],
  in LocalL4ScalarArray normalizedParam[], 
  in Vec3Array deltaPosition[], 
  in LocalL4ScalarArray weights[],
  ){
  //  リストを制作した際のターゲット数と今回参照するターゲット数に不足がないかを確認する
  //  indexList[0].others[0]にターゲット数が格納されているためcountの数が実際のターゲット数とは異なるので、ループではweightsのサイズを使用する
  if(indexList[0].others[0] > this.curveCount()){
    report("!!!!!!Error!!!!!! ::: Curves.MulWeight : IndexList require count = "+indexList[0].others[0]+". But Curve count = "+this.curveCount());
    return;
  }else{
    LocalL4ScalarArray nParams[];
    if(ratioType == 1){ // normalizedParamを使用
      nParams = normalizedParam;
    }else{  // lengthRatioを使用
      nParams.resize(lengthRatio.size());
      for(Integer i=0; i<lengthRatio.size(); i++){
        for(Integer j=0; j<lengthRatio[i].count; j++){
          Float32 nParam = this.getNormalizedParameterFromLengthRatio(indexList[i].first4[j], lengthRatio[i].first4[j]);
          nParams[i].set(j, nParam);
        }
      }
    }
    result.resize(weights.size());
    switch(getValueType){
      case 0: //  position
        MulWeightTaskPos<<<result.size()>>>(result, this, indexList, nParams, weights);
        break;
      case 1: //  tangent
        MulWeightTaskTan<<<result.size()>>>(result, this, indexList, nParams, weights);
        break;
      case 2: //  normal
        if(this.attributes.has("normalDirections") == false){
          report("!!!!!!Error!!!!!! ::: Curves.MulWeight or MulWeightArray : this Curves don't have 'normalDirections' attribute");
          return;
        }
        Curves nCurve = this.createNormalDirectionAttributeCurves(0, 1.0);

        MulWeightTaskNom<<<result.size()>>>(result, this, indexList, nParams, weights, nCurve);
        break;
      case 3: //  deltaPositon
        if(deltaPosition.size() == 0){
          report("!!!!!!Error!!!!!! ::: Curves.MulWeight or MulWeightArray : input deltaPosition is empty");
          return;
        }
        //  ノーマル計算用のカーブを作成
        Curves normalCurves();
        for(Integer i=0; i<this.curveCount(); i++){
          Size poiCount = this.getPointCount(i);
          UInt32 startID;
          UInt32 endtID;
          this.getPointRange(i, startID, endtID);
          //  編集済みのノーマル情報があるならアトリビュートから取得
          Vec3 normals[];
          normals.resize(poiCount);
          if(this.attributes.has("normalDirections")){
            Ref<Vec3Attribute> normalsAttr = this.attributes.getAttribute("normalDirections");
            for(Integer j=0; j<poiCount; j++){
              if(normalsAttr.values[j] == Vec3(0.0)){
                report("!!!!!!Error!!!!!! ::: Curves.MulWeight or MulWeightArray : 'normalDirections' attribute values["+j+"] is Vec3(0.0)");
                return;
              }else{
                normals[j] = normalsAttr.values[j+startID];
              }
            }
          }else{
            report("!!!!!!Error!!!!!! ::: Curves.mulWeight or MulWeightArray : this curves don't have 'normalDirections' attribute.");
            return;
          }
          
          Vec3 pos[] = this.getAllPointPositions(); //  Curvesのすべてのポイントポジションを取得（↑で取得しておいたstartIDで必要箇所を特定できる）
          
          Vec3 addCurvePos[]; //  カーブ制作用のポジション格納場所を準備
          addCurvePos.resize(poiCount);
          for(Integer j=0; j<poiCount; j++){
            addCurvePos[j] = pos[j+startID] + normals[j];
          }
          UInt8 type = this.getCurveType(i);
            //  ベースカーブと同じタイプ、設定でカーブを作成
            switch(type){
              case 1:
                normalCurves.addLinearCurve(addCurvePos, this.isClosed(i));
                break;
              case 2:
                UInt8 degree = this.getDegree(i);
                normalCurves.addBezier(addCurvePos, degree, this.isClosed(i));
                break;
              case 3:
                UInt8 degree = this.getDegree(i);
                UInt8 form = 0;
                if(this.isClosed(i)){
                  form = 1;
                  if(this.isPeriodic(i)){
                    form = 2;
                  }
                }
                normalCurves.addNURBS(addCurvePos, degree, form); 
                break;
            }
        }
        MulWeightTaskDlt<<<result.size()>>>(result, this, indexList, nParams, deltaPosition, weights, normalCurves);
        break;
    }
  }
}
//  getMultipliedCurvesValueByWeights ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
