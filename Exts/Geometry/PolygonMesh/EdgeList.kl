require Geometry;

object EdgeList{
	Boolean isInitialized;
	PolygonMesh mesh;
	PolygonMeshEdge edge[];	//	PolygonMeshEdgeにはエッジに隣接する1つもしくは2つのポリゴンから番号が若い方のIDが登録される。さらにエッジのスタートのポイントIDも格納される（エッジのスタート・エンドの向きは登録されたポリゴン内を左回りに見た向き）
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function EdgeList(){
	this.isInitialized = false;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// set / reset ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ポリゴンごとに各ポリゴンポイントをファーストポイントとするエッジを検査していく。
// 隣接するポリゴンが無かった場合または自身のポリゴン番号が隣接するポリゴン番号がより若い場合にPolygonMeshEdgeを登録する
function EdgeList.set!(PolygonMesh mesh){
	if(!this.isInitialized){
		for(Integer i=0; i<mesh.polygonCount(); i++){
	    for(Integer j=0; j<mesh.getPolygonSize(i); j++){
	      Scalar polID = mesh.getPolygonAdjacentPolygon(i,j);
        if(mesh.polygonCount() < polID){	//	隣接するメッシュが無い（＝ボーダーだった）場合はpolIDに無限数が返されている
	        this.edge.push(mesh.getPolygonEdge(i,j));
	      }else{
	        if(i < mesh.getPolygonAdjacentPolygon(i,j)){
	          this.edge.push(mesh.getPolygonEdge(i,j));
	        }
	      }
	    }
	  }
	  this.mesh = mesh;
	  this.isInitialized = true;
	}
}

function EdgeList.reset!(){
	if(this.isInitialized){
		this.isInitialized = false;
		this.edge.resize(0);
		
		this.set(this.mesh);
	}
}
// set / reset ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// getEdgeCount //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function Size EdgeList.count?(){
	return this.edge.size();
}

// getEdgeCount //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// getEdgePoint /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function Size EdgeList.getEdgeFirstPoint?(Size id){
	return this.mesh.getEdgeFirstPoint(this.edge[id]);
}

function Size EdgeList.getEdgeSecondPoint?(Size id){
	return this.mesh.getEdgeSecondPoint(this.edge[id]);
}

function Size EdgeList.getSubEdgeFirstPoint?(Size id, Size subID){
  return this.mesh.getPolygonPoint(id,0);
}

function Size EdgeList.getSubEdgeSecondPoint?(Size id, Size subID){
	return this.mesh.getPolygonPoint(id,subID+2);
}
// getEdgePoints /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// getEdgePointPosition //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function Vec3 EdgeList.getEdgeFirstPointPosition?(Size id){
	Size poiID = this.mesh.getEdgeFirstPoint(this.edge[id]);
	return this.mesh.getPointPosition(poiID);
}

function Vec3 EdgeList.getEdgeSecondPointPosition?(Size id){
	Size poiID = this.mesh.getEdgeSecondPoint(this.edge[id]);
	return this.mesh.getPointPosition(poiID);
}

function Vec3 EdgeList.getSubEdgeFirstPointPosition?(Size id, Size subID){
	Size poiID = this.getSubEdgeFirstPoint(id, subID);
	return this.mesh.getPointPosition(poiID);
}

function Vec3 EdgeList.getSubEdgeSecondPointPosition?(Size id, Size subID){
	Size poiID = this.getSubEdgeSecondPoint(id, subID);
	return this.mesh.getPointPosition(poiID);
}

// getEdgePoints /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// getEdgePolygons ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// エッジに隣接するポリゴン番号を取得する
// このエッジがボーダー（メッシュの境界線）だった場合は無限数が返される

function EdgeList.getEdgePolygons?(Size id, out Size leftPoly, out Size rightPoly){
	if(this.isInitialized){
		leftPoly = this.mesh.getEdgeLeftPolygon(this.edge[id]);
		rightPoly = this.mesh.getEdgeRightPolygon(this.edge[id]);
  }
}

// getEdgePolygons ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// isBorder //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//　このエッジがボーダー（メッシュの境界線）かチェック

function Boolean EdgeList.isBorder?(Size id){
	Size f,r;
	this.getEdgePolygons(id,f,r);
	if(this.mesh.polygonCount() < f || this.mesh.polygonCount() < r){
		return true;
	}else{
		return false;
	}
}

// isBorder //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// toLines ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// エッジをLine化する

function Lines EdgeList.toLines?(in Boolean includeSubEdge){
	Lines result();
	for(Integer i=0; i<this.count(); i++){
		result.addLine(this.getEdgeFirstPointPosition(i), this.getEdgeSecondPointPosition(i));
	}
	if(includeSubEdge){
		for(Integer i=0; i<this.mesh.polygonCount(); i++){
			for(Integer j=0; j<this.mesh.getPolygonSubTriangleCount(i)-1; j++){
				result.addLine(this.getSubEdgeFirstPointPosition(i, j), this.getSubEdgeSecondPointPosition(i, j));
			}
		}
	}
	return result;
}