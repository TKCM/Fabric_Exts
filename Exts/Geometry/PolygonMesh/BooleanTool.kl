require TKCM;	//	need "EdgeList", "Crossthis", "SplitPolygon2"

//	二つのポイント（poi0,poi1）がポリゴン内のポリゴンポイントインデックスにおいて左回り順であるかをチェックする
function Boolean PolygonMesh.antiClockwise?(in Size polygonID, in Size poi0, in Size poi1, out Size polPoi0, out Size polPoi1){
	Boolean result;
	polPoi0 = this.getPolygonPointIndex(polygonID, poi0);
	polPoi1 = this.getPolygonPointIndex(polygonID, poi1);
	Size polySize = this.getPolygonSize(polygonID)-1;
	if(polPoi0 < polPoi1){
		result = true;
	}else{
		result = false;
	}

	if(polPoi0 == 0 && polPoi1 == polySize){
		result = false;
	}
	if(polPoi0 == polySize && polPoi1 == 0){
		result = true;
	}

	return result;
}

//	CrossDataからSplitPolygon2に必要な情報を取得する
//	CrossData生成で使用したmeshAをmeshBで分割するするための情報を出力する
//	meshBを分割したい場合は別途CrossDataを準備する必要がある（CrossDataの配列データの並びがmeshA主体で作られているため）
function CrossData.toSplitPolygon2?(
	in EdgeList meshEdges,  
	out Size polygonID[],
	out Size polygonPointIndex1[],
	out Scalar edgeSplitRatio1[],
	out Size polygonPointIndex2[],
	out Scalar edgeSplitRatio2[],
	out Vec3Array addPointsPosition[],
	){
	polygonID.resize(0);
	polygonPointIndex1.resize(0);
	edgeSplitRatio1.resize(0);
	polygonPointIndex2.resize(0);
	edgeSplitRatio2.resize(0);
	addPointsPosition.resize(0);
	//	meshA内の分割対象になっているポリゴンごとにエッジやエッジ分割レシオ、分割の追加座標を準備していく
	Size cnt, loopCnt;
	while(true){
		if(this.crossPos.size() <= cnt){
			break;
		}
		Vec3 addPoi[];
		Size poiID1, poiID2;
		Scalar ratio1 = -1;
		Scalar ratio2 = -1;
		
		Size polyID = this.meshAPolyID[cnt];

		if(this.aOrB[cnt] == false){
			Size edgeFPoi = meshEdges.getEdgeFirstPoint(this.edgeID[cnt]);
			Size edgeSPoi = meshEdges.getEdgeSecondPoint(this.edgeID[cnt]);
			Vec3 edgeFPos = meshEdges.getEdgeFirstPointPosition(this.edgeID[cnt]);
			Vec3 edgeSPos = meshEdges.getEdgeSecondPointPosition(this.edgeID[cnt]);
			Size polPoi0, polPoi1;
			Boolean acw = meshEdges.mesh.antiClockwise(polyID, edgeFPoi, edgeSPoi, polPoi0, polPoi1);
			if(acw){
				poiID1 = polPoi0;
				ratio1 = edgeFPos.distanceTo(this.crossPos[cnt]) / edgeFPos.distanceTo(edgeSPos);
			}else{
				poiID1 = polPoi1;
				ratio1 = edgeSPos.distanceTo(this.crossPos[cnt]) / edgeFPos.distanceTo(edgeSPos);
			}
		}

		//	同じポリゴンに対して複数回分割が行われる(チェインが複数本ある)場合はスルー（←将来的に対応）
		Boolean stop;
		for(Integer j=0; j<polygonID.size(); j++){
			if(polyID == polygonID[j]){
				stop = true;
				break;
			}
		}
		if(ratio1 == -1){//stop || ratio1 == -1){	//	一つ目のエッジ分割情報が登録されなかった場合はratio1は”-1”のままになっているため、この場合の処理を継続させない
			cnt += 1;
		}else{
			cnt += 1;

			Boolean w = true;
			while(w){
				if(this.crossPos.size() <= cnt || polyID != this.meshAPolyID[cnt]){
					break;
				}
				if(this.aOrB[cnt] == false){	//	meshAのエッジがBへ接触している場合
					Size edgeFPoi = meshEdges.getEdgeFirstPoint(this.edgeID[cnt]);
					Size edgeSPoi = meshEdges.getEdgeSecondPoint(this.edgeID[cnt]);
					Vec3 edgeFPos = meshEdges.getEdgeFirstPointPosition(this.edgeID[cnt]);
					Vec3 edgeSPos = meshEdges.getEdgeSecondPointPosition(this.edgeID[cnt]);
					Size polPoi0, polPoi1;
					Boolean acw = meshEdges.mesh.antiClockwise(polyID, edgeFPoi, edgeSPoi, polPoi0, polPoi1);
					if(acw){
						poiID2 = polPoi0;
						ratio2 = edgeFPos.distanceTo(this.crossPos[cnt]) / edgeFPos.distanceTo(edgeSPos);
					}else{
						poiID2 = polPoi1;
						ratio2 = edgeSPos.distanceTo(this.crossPos[cnt]) / edgeFPos.distanceTo(edgeSPos);
					}
				}else{	//	meshBからAへの接触箇所　＝　SplitPolygon2での追加頂点
					if(0<addPoi.size()){
						if(addPoi[ addPoi.size()-1 ] != this.crossPos[cnt]){
							addPoi.push(this.crossPos[cnt]);
						}
					}else{
						addPoi.push(this.crossPos[cnt]);
					}
				}
				cnt += 1;

				//	PolyIDが連続していても別のチェインの可能性があるのでチェック
				for(Integer j=0; j<this.chainPackList.size(); j++){
					if(cnt == this.chainPackList[j]){
						w = false;
					}
				}
			}

			//　全ての要素がそろったのを確認してから出力
			if(ratio1 != -1 && ratio2 != -1){
				polygonID.push(polyID);
				polygonPointIndex1.push(poiID1);
				edgeSplitRatio1.push(ratio1);
				polygonPointIndex2.push(poiID2);
				edgeSplitRatio2.push(ratio2);
				addPointsPosition.push(addPoi);
			}
		}
	}//while() end
}