
//  ジオメトリロケーションから最も近いポリゴンエッジを取得する
function PolygonMesh.getClosestEdgeFromLocation(in GeometryLocation loc, out Size polygon, out Size edgeFirstPoi, out Scalar ratio, out Scalar distance, out Vec3 pos){
  if(!loc.isValid()){
    return;
  }

  //  ジオメトリロケーションのポリゴンID
  polygon = loc.index;
  //  ポリゴンのエッジを線分としてジオメトリロケーションとの距離を計算していく
  //  ポリゴンポイント最終番号と０番との線分の値をスタート値にする
  Vec3 p0, p1, pA;
  p0 = this.getPointPosition( this.getPolygonPoint(polygon, this.getPolygonSize(polygon)-1) );
  p1 = this.getPointPosition( this.getPolygonPoint(polygon, 0) );
  pA = this.getPositionAtLocation(loc);
  distance = distFromPointToSegment(pA, p0, p1);
  edgeFirstPoi = this.getPolygonSize(polygon)-1;
  pos = closestSegmentPoint(pA, p0, p1, ratio);
  //  エッジを順番に計算していき線分（エッジ）との距離が短いものがあった場合は各種値（レシオや距離など）を更新する
  for(Integer i=0; i<this.getPolygonSize(polygon)-1; i++){
    p0 = this.getPointPosition( this.getPolygonPoint(polygon, i) );
    p1 = this.getPointPosition( this.getPolygonPoint(polygon, i+1) );
    Scalar rDist = distFromPointToSegment(pA, p0, p1);
    if(rDist < distance){
      distance = rDist;
      edgeFirstPoi = i;
      pos = closestSegmentPoint(pA, p0, p1, ratio);
    }
  } 
}

function Boolean PolygonMesh.onEdgeOrPoint?(in GeometryLocation loc, out Size point[]){
  Boolean result;

  if(!loc.isValid()){
    return result;
  }

  UInt32 poi[3];
  Scalar weights[3];
  this.getLocationPointsAndWeights( loc, poi, weights );

  // weight値が0のものがあるかチェック
  Size nonZero[];
  for(Size i=0; i<3; i++){
    if(abs(weights[i]) < PRECISION){
      result = true;
    }else{
      nonZero.push(poi[i]);
    }
  }

  if(result){
    point = nonZero;
  }

  return result;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  GeometryLocationがメッシュのエッジ或いはポイント上に重なっていないかをチェックする
//  重なっていない場合はfalseを返す
//  エッジ上にある場合は、エッジのファーストポリゴンポイントとファーストポリゴンポイントへのウェイト値を返す
//  ポイント上にある場合は、ポリゴンポイントとウェイト値（1.0）を返す
function Boolean GeometryLocation.isOnEdgeOrPoint?(in PolygonMesh mesh, out Integer firstPolyPoint, out Scalar weight){
  Boolean result, needAdjust = true;

  Scalar weights[3];
  UInt32 points[3];
  mesh.getLocationPolygonPointIndicesAndWeights( this, points, weights );

  //  ウェイトを参照して値が0でないポリゴンポイントをリスト化する
  Size usePoi[];
  for(Integer i=0; i<3; i++){
    if(abs(weights[i]) < PRECISION == false){
      usePoi.push(i);
      //  後処理*Aのためにマーキングしておく
      if(i==1){
        needAdjust = false;
      }
    }
  }

  //  リストの数が3でない場合はオンエッジ或いはオンポイントであると判断できる
  if(usePoi.size() != 3){
    result = true;
    weight = weights[ usePoi[0] ];
    firstPolyPoint = points[ usePoi[0] ];
  }
  
  //  *A　オンエッジかつエッジのポリゴンポイントが[0,3]の場合の処理
  //  polyPointの出力を0ではなく3にする
  if(needAdjust && usePoi.size() == 2){
    weight = weights[ usePoi[1] ];
    firstPolyPoint = points[ usePoi[1] ];
  }
  return result;
}
