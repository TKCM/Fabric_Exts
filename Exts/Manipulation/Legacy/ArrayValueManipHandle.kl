require InlineDrawing;
require FileIO;
require JSON;
require FabricInterfaces;
require Manipulation;

object ArrayValueManipHandle : ManipHandle, RTValFromJSONDecoder, RTValToJSONEncoder{
  Integer oldModeID[String];
  Vec3 oldAxisAndNormal[String][3];
  Scalar oldLimiter[String][2];

  Boolean saveEnable;
  Boolean saveExternalFile;
  FilePath saveFolderPath;
  String saveFileName;

  String manipVec3Names[];
  Vec3 manipulationResultVec3[String][];
  String manipXfoNames[];
  Xfo manipulationResultXfo[String][];

  Integer evalType[String]; //  1=non, 2=evalCanvasPort, （3=Canvas内のノードのポートへ直接値を設定）
};

function ArrayValueManipHandle(){
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// get values ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function Vec3[] ArrayValueManipHandle.getVec3Values?(String manipName){
  return this.manipulationResultVec3[manipName];
}

function Xfo[] ArrayValueManipHandle.getXfoValues?(String manipName){
  return this.manipulationResultXfo[manipName];
}

function Quat[] ArrayValueManipHandle.getQuatValues?(String manipName){
  Quat result[];
  result.resize(this.manipulationResultXfo[manipName].size());
  for(Integer i=0; i<result.size(); i++){
    result[i] = this.manipulationResultXfo[manipName][i].ori;
  }
  return result;
}

// get values //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// add Vec3 manipulator //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function ArrayValueManipHandle.addPositionsManip!(
  in Integer mode,
  in String name,
  in PolygonMesh mesh,
  in Vec3 pos[],
  in Integer setID,
  in Color color,
  in Scalar size,
  in InlineInstance parentInstance,
  in Integer evalType,
  in String portToDrive,
  in String hostGraphName,
  out InlineInstance instance
  ) {
  if(name.length() == 0 || pos.size() == 0 || setID > pos.size() || portToDrive.length() == 0 || hostGraphName.length() == 0){
    return;
  }
  Xfo xfo;
  xfo.tr = pos[setID];
  xfo.sc *= size;

  if(this.manipulationResultVec3.has(name)){
    xfo.tr = this.manipulationResultVec3[name][setID];
  }else{
    this.manipVec3Names.push(name);
    this.manipulationResultVec3[name] = pos;
  }

  this.ensureGizmoManipExists();

  instance = this.getGizmoInstance(name+setID, mesh, xfo, color, parentInstance);
  InlineTransform transform = instance.getTransform();
  String uniqueName = name+setID + this.uid();
  if(this.gizmoHandlers.has(uniqueName) && this.oldModeID[name] == mode && this.evalType[name] == evalType){
    this.gizmoHandlers[uniqueName].owner = instance;
    return;
  }

  TransformManipulationCallback2 callback();
  callback.addTarget(transform);
  callback.setPortToDrive(portToDrive);
  callback.setGraph(hostGraphName);
  callback.setID = setID;
  callback.dataType = 0;  //type = vec3[]
  callback.restVec3 = this.manipulationResultVec3[name];
  callback.evalType = evalType;
  this.gizmoHandlers[uniqueName] = PositionGizmoHandler(instance, callback);

  if(setID == pos.size()-1){
    this.oldModeID[name] = mode;
    this.evalType[name] = evalType;
  }
}

function ArrayValueManipHandle.addPositionAxisManip!(
  in Integer mode,
  in String name,
  in PolygonMesh mesh,
  in Vec3 pos[],
  in Integer setID,
  in Color color,
  in Scalar size,
  in Vec3 axis,
  in InlineInstance parentInstance,
  in Integer evalType,
  in String portToDrive,
  in String hostGraphName,
  out InlineInstance instance
  ) {

  if(name.length() == 0 || pos.size() == 0 || setID > pos.size() || portToDrive.length() == 0 || hostGraphName.length() == 0){
    return;
  }
  
  Xfo xfo;
  xfo.tr = pos[setID];
  xfo.sc *= size;
  
  if(this.manipulationResultVec3.has(name)){
    xfo.tr = this.manipulationResultVec3[name][setID];
  }else{
    this.manipVec3Names.push(name);
    this.manipulationResultVec3[name] = pos;
  }
  this.ensureGizmoManipExists();

  instance = this.getGizmoInstance(name+setID, mesh, xfo, color, parentInstance);
  InlineTransform transform = instance.getTransform();

  String uniqueName = name + setID + this.uid();
  
  if(this.gizmoHandlers.has(uniqueName) && this.oldModeID[name] == mode && this.oldAxisAndNormal[name][0] == axis && this.evalType[name] == evalType){
    return;
  }

  TransformManipulationCallback2 callback();
  callback.addTarget(transform);
  callback.setPortToDrive(portToDrive);
  callback.setGraph(hostGraphName);
  callback.setID = setID;
  callback.dataType = 0;  //type = vec3[]
  callback.restVec3 = this.manipulationResultVec3[name];
  callback.evalType = evalType;
  this.gizmoHandlers[uniqueName] = PositionAxisGizmoHandler(instance, axis, callback);

  if(setID == pos.size()-1){
    this.oldModeID[name] = mode;
    this.oldAxisAndNormal[name][0] = axis;
    this.evalType[name] = evalType;
  }
}

function ArrayValueManipHandle.addPositionPlanarManip!(
  in Integer mode,
  in String name,
  in PolygonMesh mesh,
  in Vec3 pos[],
  in Integer setID,
  in Color color,
  in Scalar size,
  in Vec3 normal,
  in InlineInstance parentInstance,
  in Integer evalType,
  in String portToDrive,
  in String hostGraphName,
  out InlineInstance instance
  ) {

  if(name.length() == 0 || pos.size() == 0 || setID > pos.size() || portToDrive.length() == 0 || hostGraphName.length() == 0){
    return;
  }
  
  Xfo xfo;
  xfo.tr = pos[setID];
  xfo.sc *= size;
  
  if(this.manipulationResultVec3.has(name)){
    xfo.tr = this.manipulationResultVec3[name][setID];
  }else{
    this.manipVec3Names.push(name);
    this.manipulationResultVec3[name] = pos;
  }
  this.ensureGizmoManipExists();

  instance = this.getGizmoInstance(name+setID, mesh, xfo, color, parentInstance);
  InlineTransform transform = instance.getTransform();

  String uniqueName = name + setID + this.uid();
  
  if(this.gizmoHandlers.has(uniqueName) && this.oldModeID[name] == mode && this.oldAxisAndNormal[name][1] == normal && this.evalType[name] == evalType){
    return;
  }

  TransformManipulationCallback2 callback();
  callback.addTarget(transform);
  callback.setPortToDrive(portToDrive);
  callback.setGraph(hostGraphName);
  callback.setID = setID;
  callback.dataType = 0;  //type = vec3[]
  callback.restVec3 = this.manipulationResultVec3[name];
  callback.evalType = evalType;
  this.gizmoHandlers[uniqueName] = PositionPlanarGizmoHandler(instance, normal, callback);

  if(setID == pos.size()-1){
    this.oldModeID[name] = mode;
    this.oldAxisAndNormal[name][1] = normal;
    this.evalType[name] = evalType;
  }
}

function ArrayValueManipHandle.addPositionSliderManip!(
  in Integer mode,
  in String name,
  in PolygonMesh mesh,
  in Vec3 pos[],
  in Integer setID,
  in Color color,
  in Scalar size,
  in Vec3 sliderAxis,
  in Scalar sliderLimitMin,
  in Scalar sliderLimitMax,
  in InlineInstance parentInstance,
  in Integer evalType,
  in String portToDrive,
  in String hostGraphName,
  out InlineInstance instance
  ) {

  if(name.length() == 0 || pos.size() == 0 || setID > pos.size() || portToDrive.length() == 0 || hostGraphName.length() == 0 || sliderLimitMin >= sliderLimitMax){
    return;
  }
  
  Xfo xfo;
  xfo.tr = pos[setID];;
  xfo.sc *= size;
  
  if(this.manipulationResultVec3.has(name)){
    xfo.tr = this.manipulationResultVec3[name][setID];
  }else{
    this.manipVec3Names.push(name);
    this.manipulationResultVec3[name] = pos;
  }
  
  this.ensureGizmoManipExists();

  instance = this.getGizmoInstance(name+setID, mesh, xfo, color, parentInstance);
  InlineTransform transform = instance.getTransform();

  String uniqueName = name + setID + this.uid();
  
  if(this.gizmoHandlers.has(uniqueName) && this.oldModeID[name] == mode && this.oldAxisAndNormal[name][2] == sliderAxis && this.oldLimiter[name][0] == sliderLimitMin && this.oldLimiter[name][1] == sliderLimitMax && this.evalType[name] == evalType){
    return;
  }

  TransformManipulationCallback2 callback();
  callback.addTarget(transform);
  callback.setPortToDrive(portToDrive);
  callback.setGraph(hostGraphName);
  callback.setID = setID;
  callback.dataType = 0;  //type = vec3[]
  callback.restVec3 = this.manipulationResultVec3[name];
  callback.evalType = evalType;
  Vec2 limits = Vec2( sliderLimitMin, sliderLimitMax);
  this.gizmoHandlers[uniqueName] = SliderGizmoHandler(instance, sliderAxis, callback, limits);

  if(setID == pos.size()-1){
    this.oldModeID[name] = mode;
    this.oldAxisAndNormal[name][2] = sliderAxis;
    this.oldLimiter[name][0] = sliderLimitMin;
    this.oldLimiter[name][1] = sliderLimitMax;
    this.evalType[name] = evalType;
  }
}

// add Vec3 manipulator //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// add Quat manipulator //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ArrayValueManipHandle.addOrientationAxisManip!(
  in Integer mode,
  in String name,
  in PolygonMesh mesh,
  in Xfo xfo[],
  in Integer setID,
  in Color color,
  in Scalar size,
  in Vec3 axis,
  in InlineInstance parentInstance,
  in Integer evalType,
  in String portToDrive,
  in String hostGraphName,
  out InlineInstance instance
  ) {

  if(name.length() == 0 || xfo.size() == 0 || setID > xfo.size() || portToDrive.length() == 0 || hostGraphName.length() == 0){
    return;
  }
  
  Xfo xfoToUse = xfo[setID];
  if(this.manipulationResultXfo.has(name)){
    this.manipulationResultXfo[name][setID].tr = xfo[setID].tr;
    xfoToUse.ori = this.manipulationResultXfo[name][setID].ori;
    xfoToUse.tr = this.manipulationResultXfo[name][setID].tr;
  }else{
    this.manipXfoNames.push(name);
    this.manipulationResultXfo[name] = xfo;
  }
  xfoToUse.sc *= size;
  this.ensureGizmoManipExists();

  instance = this.getGizmoInstance(name+setID, mesh, xfoToUse, color, parentInstance);
  InlineTransform transform = instance.getTransform();

  TransformManipulationCallback2 callback();
  callback.addTarget(transform);
  callback.targets[0].setGlobalXfo(0,xfoToUse); //  入力されたポジションが変更された場合追従させる

  String uniqueName = name + setID + this.uid();
  if(this.gizmoHandlers.has(uniqueName) && this.oldModeID[name] == mode && this.oldAxisAndNormal[name][0] == axis && this.evalType[name] == evalType){
    return;
  }

  callback.setPortToDrive(portToDrive);
  callback.setGraph(hostGraphName);
  callback.setID = setID;
  callback.dataType = 1;  //type = Xfo[]
  callback.restXfo = this.manipulationResultXfo[name];
  callback.evalType = evalType;
  this.gizmoHandlers[uniqueName] = OrientationAxisGizmoHandler(instance, axis, callback);
  
  if(setID == xfo.size()-1){
    this.oldModeID[name] = mode;
    this.oldAxisAndNormal[name][0] = axis;
    this.evalType[name] = evalType;
  }
}

function ArrayValueManipHandle.addOrientationSphericalManip!(
  in Integer mode,
  in String name,
  in PolygonMesh mesh,
  in Xfo xfo[],
  in Integer setID,
  in Color color,
  in Scalar size,
  in Float32 tolerance,
  in InlineInstance parentInstance,
  in Integer evalType,
  in String portToDrive,
  in String hostGraphName,
  out InlineInstance instance
  ) {

  if(name.length() == 0 || xfo.size() == 0 || setID > xfo.size() || portToDrive.length() == 0 || hostGraphName.length() == 0){
    return;
  }

  this.ensureGizmoManipExists();

  Xfo xfoToUse = xfo[setID];
  if(this.manipulationResultXfo.has(name)){
    this.manipulationResultXfo[name][setID].tr = xfo[setID].tr;
    xfoToUse.ori = this.manipulationResultXfo[name][setID].ori;
    xfoToUse.tr = this.manipulationResultXfo[name][setID].tr;
  }else{
    this.manipXfoNames.push(name);
    this.manipulationResultXfo[name] = xfo;
  }
  xfoToUse.sc *= size;

  instance = this.getGizmoInstance(name+setID, mesh, xfoToUse, color, parentInstance);
  InlineTransform transform = instance.getTransform();

  TransformManipulationCallback2 callback();
  callback.addTarget(transform);
  callback.targets[0].setGlobalXfo(0,xfoToUse); //  入力されたポジションが変更された場合追従させる

  String uniqueName = name + setID + this.uid();
  if(this.gizmoHandlers.has(uniqueName) && this.oldModeID[name] == mode && this.evalType[name] == evalType){
    return;
  }
  
  callback.setPortToDrive(portToDrive);
  callback.setGraph(hostGraphName);
  callback.setID = setID;
  callback.dataType = 1;  //type = Xfo[]
  callback.restXfo = this.manipulationResultXfo[name];
  callback.evalType = evalType;
  this.gizmoHandlers[uniqueName] = OrientationSphericalGizmoHandler(instance, tolerance, callback);
  
  if(setID == xfo.size()-1){
    this.oldModeID[name] = mode;
    this.evalType[name] = evalType;
  }
}

// add Quat manipilator ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// save & load ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

inline ArrayValueManipHandle.save!(Boolean saveEnable, Boolean saveExternalFile, FilePath saveFolderPath, String saveFileName){
  this.saveEnable = saveEnable;
  this.saveExternalFile = saveExternalFile;
  this.saveFolderPath = saveFolderPath;
  this.saveFileName = saveFileName;
}

inline JSONDictValue ArrayValueManipHandle.saveBin(){
  JSONDictValue root();
  if(!this.saveFolderPath.exists()){
    setError("!!!!!!!!!!!!!!!! Could not save !!!!!!!!!!!!!! saveFolderPath is not exists : " + this.saveFolderPath.string() );
  }else if(!this.saveFileName){
    setError("!!!!!!!!!!!!!!!! Could not save !!!!!!!!!!!!!! saveFileName is null");
  }else{
    // prepare save file path & file name
    FilePath binCacheFilePath(); 
    binCacheFilePath = this.saveFolderPath / FilePath(this.saveFileName + '_' + 'BinCache.bin');

    BinaryBlockWriter blockWriter(binCacheFilePath.string());
    blockWriter.setNumBlocks(3);
    // ロード時にVec3,Xfoの配列数がわかるように保存しておく
    BinaryBlockWriter nameCount = blockWriter.beginWriteBlock('nameCount', 2);{
      BinaryBlockWriter vec3Count = nameCount.beginWriteBlock( 'vec3Count' );{
        UInt32 numElements = this.manipVec3Names.size();
        Integer data = this.manipVec3Names.size();
        vec3Count.write(numElements.data(), numElements.dataSize());
        vec3Count.write(data.data(), data.dataSize());
      }
      BinaryBlockWriter xfoCount = nameCount.beginWriteBlock( 'xfoCount' );{
        UInt32 numElements = this.manipXfoNames.size();
        Integer data = this.manipXfoNames.size();
        xfoCount.write(numElements.data(), numElements.dataSize());
        xfoCount.write(data.data(), data.dataSize());
      }
    }
    //  操作結果を格納しているVec3とXfoの辞書名の保存
    BinaryBlockWriter arrayValManipNames = blockWriter.beginWriteBlock('arrayValManipNames', this.manipVec3Names.size() + this.manipXfoNames.size());{  //  Vec3とXfoの辞書名の合計数でBin保存場所を確保
      //  Vec3.Xfoの辞書名の保存
      for(Integer i=0; i<this.manipVec3Names.size()+this.manipXfoNames.size(); i++){
        BinaryBlockWriter arrayValManipNameSub = arrayValManipNames.beginWriteBlock( 'name' + i ); {
          if(i<this.manipVec3Names.size()){
            UInt32 numElements = this.manipVec3Names[i].length();
            arrayValManipNameSub.write(numElements.data(), numElements.dataSize());
            arrayValManipNameSub.write(this.manipVec3Names[i].data(), this.manipVec3Names[i].dataSize() );
          }else{
            Integer iXfo = i - this.manipVec3Names.size();
            UInt32 numElements = this.manipXfoNames[iXfo].length();
            arrayValManipNameSub.write(numElements.data(), numElements.dataSize());
            arrayValManipNameSub.write(this.manipXfoNames[iXfo].data(), this.manipXfoNames[iXfo].dataSize() );
          }
        }
      }
    }
    //  操作結果を格納しているVec3とXfoの値の保存
    BinaryBlockWriter arrayManipValues = blockWriter.beginWriteBlock('arrayManipValues', this.manipVec3Names.size() + this.manipXfoNames.size());{ //  Vec3とXfoの数でBin保存場所を確保
      //  辞書名でVec3,Xfoの保存
      for(Integer i=0; i<this.manipVec3Names.size()+this.manipXfoNames.size(); i++){
        if(i<this.manipVec3Names.size()){
          String manipName = this.manipVec3Names[i];
          BinaryBlockWriter arrayManipVec3ValSub = arrayManipValues.beginWriteBlock( manipName );{
            UInt32 numElements = this.manipulationResultVec3[manipName].size();
            Vec3 data[] = this.manipulationResultVec3[manipName];
            arrayManipVec3ValSub.write(numElements.data(), numElements.dataSize());
            arrayManipVec3ValSub.write(data.data(), data.dataSize());
          }
        }else{
          Integer iXfo = i - this.manipVec3Names.size();
          String manipName = this.manipXfoNames[iXfo];
          BinaryBlockWriter arrayManipXfoValSub = arrayManipValues.beginWriteBlock( manipName );{
            UInt32 numElements = this.manipulationResultXfo[manipName].size();
            Xfo data[] = this.manipulationResultXfo[manipName];
            arrayManipXfoValSub.write(numElements.data(), numElements.dataSize());
            arrayManipXfoValSub.write(data.data(), data.dataSize());
          }
        }
      }
    }
    root.setString("saveFolderPath", binCacheFilePath.removeFileName().string() );
    root.setString("saveFileName", this.saveFileName + '_' + 'BinCache.bin');
    root.setString("saveFileNameOrig", this.saveFileName);
     //  bin保存場所の報告
    report('ArrayValueManipHandle value data save to "' + binCacheFilePath.string() + '\\' + this.saveFileName + '_' + 'BinCache.bin"');
  }
  return root;
}

inline JSONDictValue ArrayValueManipHandle.saveJSON(){
  JSONDictValue root();
  //  操作結果を格納しているVec3とXfoの辞書名の保存
  JSONArrayValue arrayValManipNames();{
    arrayValManipNames.values.resize(this.manipVec3Names.size() + this.manipXfoNames.size() );  //  Vec3とXfoの辞書名の合計数でJSON保存場所を確保
    for(Integer i=0; i<this.manipVec3Names.size()+this.manipXfoNames.size(); i++){
      if(i<this.manipVec3Names.size()){
        arrayValManipNames.values[i] = JSONStringValue(this.manipVec3Names[i]);
      }else{
        Integer iXfo = i - this.manipVec3Names.size();
        arrayValManipNames.values[i] = JSONStringValue(this.manipXfoNames[iXfo]);
      }
    }
  }
  //  操作結果を格納しているVec3とXfoの値の保存
  JSONArrayValue manipValues(); {
    for(Integer i=0; i<this.manipVec3Names.size() + this.manipXfoNames.size(); i++){
      if(i<this.manipVec3Names.size()){
        String manipName = this.manipVec3Names[i];
        JSONArrayValue manipVec3Value();
        manipVec3Value.values.resize(this.manipulationResultVec3[manipName].size()*3);
        for(Integer j=0; j<this.manipulationResultVec3[manipName].size(); j++){
          manipVec3Value.values[j*3]   = JSONNumberValue( this.manipulationResultVec3[manipName][j].x );
          manipVec3Value.values[j*3+1] = JSONNumberValue( this.manipulationResultVec3[manipName][j].y );
          manipVec3Value.values[j*3+2] = JSONNumberValue( this.manipulationResultVec3[manipName][j].z );
        }
        manipValues.add(manipVec3Value);
      }else{
        Integer iXfo = i - this.manipVec3Names.size();
        String manipName = this.manipXfoNames[iXfo];
        JSONArrayValue manipXfoValue();
        manipXfoValue.values.resize(this.manipulationResultXfo[manipName].size()*7);
        for(Integer j=0; j<this.manipulationResultXfo[manipName].size(); j++){
          manipXfoValue.values[j*7]   = JSONNumberValue( this.manipulationResultXfo[manipName][j].tr.x );
          manipXfoValue.values[j*7+1] = JSONNumberValue( this.manipulationResultXfo[manipName][j].tr.y );
          manipXfoValue.values[j*7+2] = JSONNumberValue( this.manipulationResultXfo[manipName][j].tr.z );
          manipXfoValue.values[j*7+3] = JSONNumberValue( this.manipulationResultXfo[manipName][j].ori.v.x );
          manipXfoValue.values[j*7+4] = JSONNumberValue( this.manipulationResultXfo[manipName][j].ori.v.y );
          manipXfoValue.values[j*7+5] = JSONNumberValue( this.manipulationResultXfo[manipName][j].ori.v.z );
          manipXfoValue.values[j*7+6] = JSONNumberValue( this.manipulationResultXfo[manipName][j].ori.w );
        }
        manipValues.add(manipXfoValue);
      }
    }
  }
  root.set("arrayValManipNames", arrayValManipNames);
  root.set("manipValues", manipValues);
  root.setInteger("Vec3Count", this.manipVec3Names.size());  // ロード時にVec3の配列数がわかるように保存しておく
  root.setInteger("XfoCount", this.manipXfoNames.size());  // ロード時にXfoの配列数がわかるように保存しておく
  report("save ArrayValueManipHandle values in this scean");
  return root;
}

inline ArrayValueManipHandle.loadBinFilePath!(FilePath binCacheFilePath){
  BinaryBlockReader blockReader(binCacheFilePath.string());
  // Vec3.Xfoの辞書名の数をロード
  BinaryBlockReader nameCount = blockReader.beginReadBlock('nameCount');
  if(nameCount){
    BinaryBlockReader vCount_reader = nameCount.beginReadBlock('vec3Count');
    Integer vCount = 0;
    vCount_reader.read(vCount.data(), vCount.dataSize());
    this.manipVec3Names.resize( vCount );
    BinaryBlockReader xCount_reader = nameCount.beginReadBlock('xfoCount');
    Integer xCount = 0;
    xCount_reader.read(xCount.data(), xCount.dataSize());
    this.manipXfoNames.resize( xCount );
  }
  BinaryBlockReader arrayValManipNames = blockReader.beginReadBlock('arrayValManipNames');
  if(arrayValManipNames){
    String readNames[] = arrayValManipNames.getBlockNames();
    //  Vec3とXfoの辞書名のロード
    //  辞書名の数はすでにロード済みで、this.manipVec3Namesとthis.manipXfoNamesの配列数に設定済み
    for(Integer i=0; i < this.manipVec3Names.size() + this.manipXfoNames.size(); i++){
      BinaryBlockReader manipName_reader = arrayValManipNames.beginReadBlock('name' + i );
      if(manipName_reader){
        UInt32 numElements = 0;
        manipName_reader.read(numElements.data(), numElements.dataSize());
        if(i<this.manipVec3Names.size()){
          for(Integer j=0; j<numElements; j++){  this.manipVec3Names[i] += ' ';  }  //  文字列をロードするための空枠を準備
          manipName_reader.read(this.manipVec3Names[i].data(), this.manipVec3Names[i].dataSize());  //  文字列をロード
        }else{
          Integer iXfo = i - this.manipVec3Names.size();
          for(Integer j=0; j<numElements; j++){  this.manipXfoNames[iXfo] += ' ';  }  //  文字列をロードするための空枠を準備
          manipName_reader.read(this.manipXfoNames[iXfo].data(), this.manipXfoNames[iXfo].dataSize());  //  文字列をロード
        }
      }
    }
  }
  BinaryBlockReader arrayManipValues = blockReader.beginReadBlock('arrayManipValues');
  if(arrayManipValues){   
    Scalar readVals[] = arrayManipValues.getBlockNames().size();  //  Vec3とXfoの辞書名の合計値が返る
    for(Integer i=0; i<readVals.size(); i++){
      //  Vec3,Xfoの各辞書ごとに値のロード
      if(i<this.manipVec3Names.size()){
        String manipName = this.manipVec3Names[i];
        BinaryBlockReader arrayManipVec3ValuesSub = arrayManipValues.beginReadBlock(manipName);  //  辞書名のデータ配列をロード
        if(arrayManipVec3ValuesSub){
          UInt32 numElements = 0;
          arrayManipVec3ValuesSub.read(numElements.data(), numElements.dataSize()); // 辞書内のVec３の配列数を取得
          this.manipulationResultVec3[manipName].resize(numElements); // Vec３をロードするための空枠を準備
          arrayManipVec3ValuesSub.read(this.manipulationResultVec3[manipName].data(), this.manipulationResultVec3[manipName].dataSize());  // 値のロード
        }
      }else{
        Integer iXfo = i - this.manipVec3Names.size();
        String manipName = this.manipXfoNames[iXfo];
        BinaryBlockReader arrayManipXfoValuesSub = arrayManipValues.beginReadBlock(manipName);  //  辞書名のデータ配列をロード
        if(arrayManipXfoValuesSub){
          UInt32 numElements = 0;
          arrayManipXfoValuesSub.read(numElements.data(), numElements.dataSize()); // 辞書内のXfoの配列数を取得
          this.manipulationResultXfo[manipName].resize(numElements); // Xfoをロードするための空枠を準備
          arrayManipXfoValuesSub.read(this.manipulationResultXfo[manipName].data(), this.manipulationResultXfo[manipName].dataSize());  // 値のロード
        }
      }
    }
  }
  report('ArrayValueManipHandle value data loaded from "' + binCacheFilePath.string() +'"');
}

inline ArrayValueManipHandle.loadJSON!(JSONDictValue json){
  //  Vec3,Xfoそれぞれの辞書数をロード
  this.manipVec3Names.resize( json.getInteger("Vec3Count") );
  this.manipXfoNames.resize( json.getInteger("XfoCount") );
  //  Vec3,Xfoそれぞれの辞書名をロード
  JSONArrayValue arrayValManipNames = json.get("arrayValManipNames");
  for(Integer i=0; i<arrayValManipNames.size(); i++){
    if(i<this.manipVec3Names.size()){
      this.manipVec3Names[i] = arrayValManipNames.getString(i);
    }else{
      Integer iXfo = i - this.manipVec3Names.size();
      this.manipXfoNames[iXfo] = arrayValManipNames.getString(i);
    }
  }
  //  Vec3,Xfoそれぞれの配列をロード
  JSONArrayValue manipValues = json.get("manipValues");
  for(Integer i=0; i<manipValues.size(); i++){
    if(i<this.manipVec3Names.size()){
      String manipName = this.manipVec3Names[i];
      JSONArrayValue manipVec3Value = manipValues.get(i);
      this.manipulationResultVec3[manipName].resize(manipVec3Value.size()/3);
      for(Integer j=0; j<this.manipulationResultVec3[manipName].size(); j++){
        this.manipulationResultVec3[manipName][j].x = manipVec3Value.getScalar(j*3);
        this.manipulationResultVec3[manipName][j].y = manipVec3Value.getScalar(j*3+1);
        this.manipulationResultVec3[manipName][j].z = manipVec3Value.getScalar(j*3+2);
      }
    }else{
      Integer iXfo = i - this.manipVec3Names.size();
      String manipName = this.manipXfoNames[iXfo];
      JSONArrayValue manipXfoValue = manipValues.get(i);
      this.manipulationResultXfo[manipName].resize(manipXfoValue.size()/7);
      for(Integer j=0; j<this.manipulationResultXfo[manipName].size(); j++){
        this.manipulationResultXfo[manipName][j].tr.x  = manipXfoValue.getScalar(j*7);
        this.manipulationResultXfo[manipName][j].tr.y  = manipXfoValue.getScalar(j*7+1);
        this.manipulationResultXfo[manipName][j].tr.z  = manipXfoValue.getScalar(j*7+2);
        this.manipulationResultXfo[manipName][j].ori.v.x = manipXfoValue.getScalar(j*7+3);
        this.manipulationResultXfo[manipName][j].ori.v.y = manipXfoValue.getScalar(j*7+4);
        this.manipulationResultXfo[manipName][j].ori.v.z = manipXfoValue.getScalar(j*7+5);
        this.manipulationResultXfo[manipName][j].ori.w   = manipXfoValue.getScalar(j*7+6);
      }
    }
  }
  report('ArrayValueManipHandle value data loaded from this scean');
}

function String ArrayValueManipHandle.convertToString!(){
  JSONDoc doc();
  if(this.saveEnable){
    if(this.saveExternalFile){
      // save bin
      doc.root = this.saveBin();
    }else{
      // save JSON
      doc.root = this.saveJSON();
    }
    doc.root.setBoolean("saved", this.saveEnable);
  }
  String json = doc.write();
  return json;
}

function Boolean ArrayValueManipHandle.convertFromString!(in String data){
  JSONDoc doc();
  if(doc.parse(data)){
    if(doc.root.has("saved")){
      this.saveEnable = true;
      // load bin
      if(doc.root.has("saveFolderPath") && doc.root.has("saveFileName")){
        this.saveExternalFile = true;
        this.saveFolderPath = FilePath(doc.root.getString("saveFolderPath"));
        this.saveFileName = doc.root.getString("saveFileNameOrig");
        String loadFileName = doc.root.getString("saveFileName");
        FilePath loadBinFilePath = this.saveFolderPath / FilePath(loadFileName) ;
        if(loadBinFilePath.exists()){
          this.loadBinFilePath(loadBinFilePath);
        }else{
          report("!!!!!!!!!!!!!!!! can not load ArrayValueManipHandle data file. File don't found from ----" + loadBinFilePath.string());
        }
      }
      // load JSON
      if(doc.root.has("arrayValManipNames")){
        this.loadJSON(doc.root);
      }
    }
  }
  return true;
}